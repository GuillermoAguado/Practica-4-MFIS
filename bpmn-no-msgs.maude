sload time.maude

--- Identificadores
mod Id is
    protecting STRING .
    sort Id .
    op id : String -> Id .
endm

view Id from TRIV to Id is
    sort Elt to Id .
endv

mod Node is 
    protecting Id .
    sort Node .
    op start : Id Id -> Node [ctor] .
    op end : Id Id -> Node [ctor] .
endm

view Node from TRIV to Node is
    sort Elt to Node .
endv

mod Resource is 
    protecting Id .
    protecting NAT .
    sort Resource .
    op resource : Id Nat Nat -> Resource [ctor] .
endm

view Resource from TRIV to Resource is
    sort Elt to Resource .
endv

mod Flow is 
    protecting Id .
    protecting POSRAT-TIME-DOMAIN-WITH-INF .
    sort Flow .
    op flow : Id Time -> Flow [ctor] .
endm

view Flow from TRIV to Flow is
    sort Elt to Flow .
endv

mod Token is 
    protecting POSRAT-TIME-DOMAIN-WITH-INF .
    protecting Id .
    sort Token .
    op token : Id Time -> Token [ctor] .
endm

view Token from TRIV to Token is
    sort Elt to Token .
endv

mod BPMN-SEM is
    --- Tiempo
    protecting POSRAT-TIME-DOMAIN-WITH-INF .
    --- Identificadores
    protecting Id .
    protecting SET{Id} .
    --- Puertas
    sort Gateway .
    op exclusive : -> Gateway [ctor] .
    op parallel : -> Gateway [ctor] .
    op event-based : -> Gateway [ctor] .
    --- Nodos
    protecting Node .
    protecting SET{Node} .
    --- Tarea
    op task : Id String Id Id Time Set{Id} -> Node [ctor] .
    --- Split
    op split : Id Gateway Id Set{Id} -> Node [ctor] .
    --- Merge
    op merge : Id Gateway Set{Id} Id -> Node [ctor] .
    --- Recursos
    protecting Resource .
    protecting SET{Resource} .
    --- Flujo
    protecting Flow .
    protecting SET{Flow} .
    --- Token
    protecting Token .
    protecting SET{Token} .
    --- Proceso
    including CONFIGURATION .
    sort Process .
    subsort Process < Cid .
    op Process : -> Process .
    op nodes:_ : Set{Node} -> Attribute [gather(&)] .        
    op flows:_ : Set{Flow} -> Attribute [gather(&)] .
    op tokens:_ : Set{Token} -> Attribute [gather(&)] .
    op gtime:_ : Time -> Attribute [gather(&)] .
    op resources:_ : Set{Resource} -> Attribute [gather(&)] .

    --- class Process | nodes: Set{Node},
    ---                flows: Set{Flow},
    ---                tokens: List{Token},
    ---                gtime: Time,
    ---                resources: Set{Resource},
    ---                events: Set{EventInstance} . 

    var o : Oid .
    var VProcess : Process .
    vars id1 id2 id3 : Id .
    var name :  String .
    var setNode1 : Set{Node} .
    var setFlow1 : Set{Flow} .
    var setId1 : Set{Id} .
    var setToken1 : Set{Token} .
    vars time1 time2 time3 : Time .
    var Atts : AttributeSet .
    
    op delta : Set{Token} Time -> Set{Token} .
    eq delta(empty, time1) = empty .
    eq delta((token(id1, time2), setToken1), time1) = ( token(id1, time2 monus time1),delta(setToken1,time1)) .

    --- Reglas

    rl [start] : < o : VProcess | nodes: (start(id1, id2), setNode1), flows: (flow(id2, time1), setFlow1), tokens: (token(id1, 0), setToken1), Atts > 
        => < o : VProcess | nodes: (start(id1, id2), setNode1), flows: (flow(id2, time1), setFlow1), tokens: (token(id2, time1), setToken1), Atts >  .
     
    rl [flowTask] : < o : VProcess | nodes: (task(id2, name, id1, id3, time2, setId1), setNode1), flows: (flow(id1, time1), setFlow1), tokens: (token(id1, 0), setToken1), Atts > 
        => < o : VProcess | nodes: (task(id2, name, id1, id3, time2, setId1), setNode1), flows: (flow(id1, time1), setFlow1), tokens: (token(id2, time2), setToken1), Atts > .
    
    rl [task] : < o : VProcess | nodes: (task(id2, name, id1, id3, time2, setId1), setNode1), flows: (flow(id3, time3), setFlow1), tokens: (token(id2, 0), setToken1), Atts > 
        => < o : VProcess | nodes: (task(id2, name, id1, id3, time2, setId1), setNode1), flows: (flow(id3, time3), setFlow1), tokens: (token(id3, time3), setToken1), Atts > .

    rl [flowEnd] : < o : VProcess | nodes: (end(id2, id1), setNode1), flows: (flow(id1, time1), setFlow1), tokens: (token(id1, 0), setToken1), Atts > 
        => < o : VProcess | nodes: (end(id2, id1), setNode1), flows: (flow(id1, time1), setFlow1), tokens: (token(id2, 0), setToken1), Atts > .

    --- para pasar de un elemento a otro le pones al token el id del elemento al que va y el time del elemento al que va
endm